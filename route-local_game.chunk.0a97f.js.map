{"version":3,"sources":["webpack:///./components/board.js","webpack:///./routes/local_game.js"],"names":["Board","textMap","ttt","E","X","O","click","event","td","target","closest","boardIndex","parseInt","getAttribute","state","props","isEmpty","renderCell","rowIndex","cellIndex","cellState","this","board","label","text","cssClass","win","indexOf","data-index","data-state","class","type","onClick","renderRow","cells","map","render","rows","Component","LocalGame","restart","finished","newGame","gameKey","player","newgame","clearGameState","route","boardClick","game","nextPlayer","alert","moveForPlayer","window","requestAnimationFrame","checkAndTakeComputersTurn","thinking","playerMap","toLowerCase","mode","modeMap","redirectIfInvalidSettings","componentDidUpdate","onfinish","localSaveStats","componentDidMount","setState","moveForComputer","status","draw","xWin","oWin","winIndexes","toUpperCase","aria-live","aria-atomic","onclick","games"],"mappings":"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","file":"route-local_game.chunk.0a97f.js","sourcesContent":["import { h, Component } from 'preact'\n\nimport ttt from '../lib/game'\n\nexport default class Board extends Component {\n  textMap = {\n    [ttt.E]: ' ',\n    [ttt.X]: 'X',\n    [ttt.O]: 'O'\n  }\n\n  click = (event) => {\n    const td = event.target.closest('td')\n    const boardIndex = parseInt(td.getAttribute('data-index'), 10)\n    const state = parseInt(td.getAttribute('data-state'), 10)\n    const isEmpty = state === 0\n    this.props.click({ td, boardIndex, isEmpty })\n  }\n\n  renderCell (rowIndex, cellIndex) {\n    const boardIndex = cellIndex + (rowIndex * 3)\n    const cellState = this.props.board[boardIndex]\n    const label = `Cell ${cellIndex}, ${rowIndex}`\n    const text = this.textMap[cellState]\n    const cssClass = this.props.win.indexOf(boardIndex) > -1 ? 'W' : ''\n\n    return (\n      <td data-index={boardIndex} data-state={cellState} class={cssClass}>\n        <div>\n          <button type='button' label={label} onClick={this.click}>{text}</button>\n        </div>\n      </td>\n    )\n  }\n\n  renderRow (rowIndex) {\n    const cells = [0, 1, 2].map(cellIndex => this.renderCell(rowIndex, cellIndex))\n\n    return (\n      <tr>\n        {cells}\n      </tr>\n    )\n  }\n\n  render () {\n    const rows = [0, 1, 2].map(rowIndex => this.renderRow(rowIndex))\n\n    return (\n      <div class='board'>\n        <table>\n          <caption>Game Board</caption>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import { h, Component } from 'preact'\nimport { route } from 'preact-router'\nimport Board from '../components/board'\nimport ttt from '../lib/game'\n\nimport { modeMap, playerMap } from '../store'\n\nexport default class LocalGame extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { thinking: false }\n    this.player = playerMap[props.player.toLowerCase()]\n    this.mode = modeMap[props.mode.toLowerCase()]\n    this.gameKey = `local-${this.player}-${this.mode}`\n    this.redirectIfInvalidSettings()\n  }\n\n  redirectIfInvalidSettings () {\n    if (typeof this.player === 'undefined' || typeof this.mode === 'undefined') route('/')\n  }\n\n  componentDidUpdate () {\n    if (!this.finished && this.game.finished) {\n      this.onfinish()\n    }\n  }\n\n  onfinish () {\n    this.props.localSaveStats(this.gameKey)\n  }\n\n  componentDidMount () {\n    if (!this.game) {\n      this.restart()\n    } else {\n      this.finished = this.game.finished\n      this.checkAndTakeComputersTurn()\n    }\n  }\n\n  checkAndTakeComputersTurn () {\n    if (!this.game || this.game.finished) return\n    if (this.game.nextPlayer === this.player) return\n    this.setState({ thinking: true })\n    window.requestAnimationFrame(() => {\n      this.props.moveForComputer(this.gameKey, this.mode)\n      this.setState({ thinking: false })\n    })\n  }\n\n  restart = (event) => {\n    this.finished = false\n    this.props.newGame(this.gameKey, this.player)\n  }\n\n  newgame = (event) => {\n    this.props.clearGameState(this.gameKey)\n    route('/')\n  }\n\n  boardClick = (event) => {\n    if (this.game.finished) return\n    if (this.game.nextPlayer !== this.player) return\n    if (!event.isEmpty) alert('This space is already taken')\n    this.props.moveForPlayer(this.gameKey, event.boardIndex)\n    window.requestAnimationFrame(() => {\n      this.checkAndTakeComputersTurn()\n    })\n  }\n\n  status () {\n    if (this.game && this.game.finished) {\n      if (this.game.draw) return 'Tie'\n      if ((this.player === ttt.X && this.game.xWin) || (this.player === ttt.O && this.game.oWin)) return 'You won'\n      return 'You lost'\n    } else {\n      return this.state.thinking ? 'Thinking...' : 'Your turn...'\n    }\n  }\n\n  render ({ player, mode }) {\n    const board = this.game ? (<Board win={this.game.winIndexes} board={this.game.board} click={this.boardClick} />) : <div />\n    return (\n      <main>\n        <p>You are playing as <strong>{player.toUpperCase()}</strong> against the computer on <strong>{mode.toLowerCase()}</strong> mode.</p>\n        <div class='board-wrapper'>\n          {board}\n          <span aria-live='polite' aria-atomic='true' class='status'>{this.status()}</span>\n        </div>\n        <p>\n          <button onclick={this.restart}>Restart</button>\n          <button onclick={this.newgame}>New Game</button>\n        </p>\n      </main>\n    )\n  }\n\n  get game () {\n    return this.props.games[this.gameKey]\n  }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./routes/host_game.js"],"names":["HostGame","props","restart","controller","newgame","route","boardClick","event","console","log","game","finished","nextPlayer","player","isEmpty","alert","move","boardIndex","state","connectedToPeer","connectedToPlayer","waiting","error","win","board","ttt","generateEmptyBoard","window","RemoteGameController","X","on","setState","winIndexes","status","this","draw","xWin","O","oWin","renderConnecting","renderButtons","renderWaitingForPlayer","link","location","href","replace","peer","id","connect","type","value","readonly","renderBoard","click","class","aria-live","aria-atomic","onclick","render","Component"],"mappings":"kXAOqBA,E,YACnB,WAAaC,GAAO,MAYlB,OAXA,cAAMA,IAAN,MAkCFC,QAAU,WACR,EAAKC,WAAWD,WApCE,EAuCpBE,QAAU,WACRC,YAAM,MAxCY,EA2CpBC,WAAa,SAACC,GACZC,QAAQC,IAAI,aAAcF,EAAO,EAAKG,MAClC,EAAKA,KAAKC,UACV,EAAKD,KAAKE,aAAe,EAAKC,SAC7BN,EAAMO,SAASC,MAAM,+BAE1B,EAAKZ,WAAWa,KAAKT,EAAMU,cA9C3B,EAAKC,MAAQ,CACXC,iBAAiB,EACjBC,mBAAmB,EACnBC,SAAS,EACTC,OAAO,EACPC,IAAK,GACLC,MAAOC,IAAIC,sBAGS,oBAAXC,O,yHAAwB,KAEnC,EAAKxB,WAAa,IAAIyB,IAAqBH,IAAII,GAC/C,EAAK1B,WAAW2B,GAAG,QAAQ,kBAAM,EAAKC,SAAS,CAAEZ,iBAAiB,OAClE,EAAKhB,WAAW2B,GAAG,aAAa,kBAAM,EAAKC,SAAS,CAAEX,mBAAmB,OACzE,EAAKjB,WAAW2B,GAAG,oBAAoB,SAACpB,GAEtC,EAAKqB,SAAS,CACZV,QAFc,EAAKX,KAAKE,aAAe,EAAKC,OAG5CU,IAAKb,EAAKsB,WACVR,MAAOd,EAAKc,WAtBE,G,gIAoDpBS,OAAA,WACE,OAAIC,KAAKxB,MAAQwB,KAAKxB,KAAKC,SACrBuB,KAAKxB,KAAKyB,KAAa,MACtBD,KAAKrB,SAAWY,IAAII,GAAKK,KAAKxB,KAAK0B,MAAUF,KAAKrB,SAAWY,IAAIY,GAAKH,KAAKxB,KAAK4B,KAAc,UAC5F,WAEAJ,KAAKhB,MAAMG,QAAU,aAAe,gB,EAI/CkB,iBAAA,WACE,OACE,wBACE,sCACCL,KAAKM,kB,EAKZC,uBAAA,WACE,IAAMC,EAAOf,OAAOgB,SAASC,KAAKC,QAAQ,QAA7B,WAAiDX,KAAK/B,WAAW2C,KAAKC,IAE7EC,EAAW,8DAAyC,qBAAOC,KAAK,OAAOC,MAAOR,EAAMS,UAAQ,KAClG,OACE,wBACE,sDACCH,EACAd,KAAKM,kB,EAKZY,YAAA,WACE,IAAM5B,EAAQU,KAAKhB,MAAME,kBAAqB,YAAC,IAAD,CAAOG,IAAKW,KAAKhB,MAAMK,IAAKC,MAAOU,KAAKhB,MAAMM,MAAO6B,MAAOnB,KAAK5B,aAAkB,wBACjI,OACE,wBACE,8CACA,mBAAKgD,MAAM,iBACR9B,EACD,oBAAM+B,YAAU,SAASC,cAAY,OAAOF,MAAM,UAAUpB,KAAKD,WAElEC,KAAKM,kB,EAKZA,cAAA,WACE,IAAMtC,EAAUgC,KAAKxB,KAAKC,SAAW,sBAAQ8C,QAASvB,KAAKhC,SAAtB,WAAkD,GACvF,OACE,qBACGA,EACD,sBAAQuD,QAASvB,KAAK9B,SAAtB,c,EAKNsD,OAAA,SAAQzD,EAAOiB,GACb,OAAKA,EAAMC,gBACND,EAAME,kBACJc,KAAKkB,cADyBlB,KAAKO,yBADPP,KAAKK,oB,qCAjFxC,OAAOL,KAAK/B,WAAWU,S,2BAIvB,OAAOqB,KAAK/B,WAAWO,U,8BAjCWiD","file":"route-host_game.chunk.a9ce7.js","sourcesContent":["import { h, Component } from 'preact'\nimport { route } from 'preact-router'\n\nimport Board from '../components/board'\nimport ttt from '../lib/game'\nimport RemoteGameController from '../lib/remote_game_controller'\n\nexport default class HostGame extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      connectedToPeer: false,\n      connectedToPlayer: false,\n      waiting: false,\n      error: false,\n      win: [],\n      board: ttt.generateEmptyBoard()\n    }\n\n    if (typeof window === 'undefined') return\n\n    this.controller = new RemoteGameController(ttt.X)\n    this.controller.on('open', () => this.setState({ connectedToPeer: true }))\n    this.controller.on('connected', () => this.setState({ connectedToPlayer: true }))\n    this.controller.on('updatedGameState', (game) => {\n      const waiting = this.game.nextPlayer !== this.player\n      this.setState({\n        waiting,\n        win: game.winIndexes,\n        board: game.board\n      })\n    })\n  }\n\n  get player () {\n    return this.controller.player\n  }\n\n  get game () {\n    return this.controller.game\n  }\n\n  restart = (event) => {\n    this.controller.restart()\n  }\n\n  newgame = (event) => {\n    route('/')\n  }\n\n  boardClick = (event) => {\n    console.log('BoardClick', event, this.game)\n    if (this.game.finished) return\n    if (this.game.nextPlayer !== this.player) return\n    if (!event.isEmpty) alert('This space is already taken')\n\n    this.controller.move(event.boardIndex)\n  }\n\n  status () {\n    if (this.game && this.game.finished) {\n      if (this.game.draw) return 'Tie'\n      if ((this.player === ttt.X && this.game.xWin) || (this.player === ttt.O && this.game.oWin)) return 'You won'\n      return 'You lost'\n    } else {\n      return this.state.waiting ? 'Waiting...' : 'Your turn...'\n    }\n  }\n\n  renderConnecting () {\n    return (\n      <main>\n        <p>Connecting...</p>\n        {this.renderButtons()}\n      </main>\n    )\n  }\n\n  renderWaitingForPlayer () {\n    const link = window.location.href.replace('/host', `/remote?${this.controller.peer.id}`)\n    // TODO put link in input with auto select and copy to clip board feature\n    const connect = (<p>Copy and paste this link to a friend: <input type='text' value={link} readonly /></p>)\n    return (\n      <main>\n        <p>Waiting for another player...</p>\n        {connect}\n        {this.renderButtons()}\n      </main>\n    )\n  }\n\n  renderBoard () {\n    const board = this.state.connectedToPlayer ? (<Board win={this.state.win} board={this.state.board} click={this.boardClick} />) : <div />\n    return (\n      <main>\n        <p>You are playing as X.</p>\n        <div class='board-wrapper'>\n          {board}\n          <span aria-live='polite' aria-atomic='true' class='status'>{this.status()}</span>\n        </div>\n        {this.renderButtons()}\n      </main>\n    )\n  }\n\n  renderButtons () {\n    const restart = this.game.finished ? <button onclick={this.restart}>Restart</button> : ''\n    return (\n      <p>\n        {restart}\n        <button onclick={this.newgame}>New Game</button>\n      </p>\n    )\n  }\n\n  render (props, state) {\n    if (!state.connectedToPeer) return this.renderConnecting()\n    if (!state.connectedToPlayer) return this.renderWaitingForPlayer()\n    return this.renderBoard()\n  }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./components/board.js","webpack:///./routes/local_game.js"],"names":["Board","Component","textMap","ttt","E","X","O","click","event","td","target","closest","boardIndex","parseInt","getAttribute","state","this","props","isEmpty","renderCell","rowIndex","cellIndex","cellState","board","label","text","cssClass","win","indexOf","class","type","onClick","renderRow","cells","map","render","rows","LocalGame","constructor","super","restart","finished","newGame","gameKey","player","newgame","clearGameState","route","boardClick","game","nextPlayer","alert","moveForPlayer","window","requestAnimationFrame","checkAndTakeComputersTurn","thinking","playerMap","toLowerCase","mode","modeMap","redirectIfInvalidSettings","componentDidUpdate","onfinish","localSaveStats","componentDidMount","setState","moveForComputer","status","draw","xWin","oWin","winIndexes","toUpperCase","onclick","games"],"mappings":"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","file":"route-local_game.chunk.2789c.js","sourcesContent":["import { h, Component } from 'preact'\n\nimport ttt from '../lib/game'\n\nexport default class Board extends Component {\n  textMap = {\n    [ttt.E]: ' ',\n    [ttt.X]: 'X',\n    [ttt.O]: 'O'\n  }\n\n  click = (event) => {\n    const td = event.target.closest('td')\n    const boardIndex = parseInt(td.getAttribute('data-index'), 10)\n    const state = parseInt(td.getAttribute('data-state'), 10)\n    const isEmpty = state === 0\n    this.props.click({ td, boardIndex, isEmpty })\n  }\n\n  renderCell (rowIndex, cellIndex) {\n    const boardIndex = cellIndex + (rowIndex * 3)\n    const cellState = this.props.board[boardIndex]\n    const label = `Cell ${cellIndex}, ${rowIndex}`\n    const text = this.textMap[cellState]\n    const cssClass = this.props.win.indexOf(boardIndex) > -1 ? 'W' : ''\n\n    return (\n      <td data-index={boardIndex} data-state={cellState} class={cssClass}>\n        <div>\n          <button type='button' label={label} onClick={this.click}>{text}</button>\n        </div>\n      </td>\n    )\n  }\n\n  renderRow (rowIndex) {\n    const cells = [0, 1, 2].map(cellIndex => this.renderCell(rowIndex, cellIndex))\n\n    return (\n      <tr>\n        {cells}\n      </tr>\n    )\n  }\n\n  render () {\n    const rows = [0, 1, 2].map(rowIndex => this.renderRow(rowIndex))\n\n    return (\n      <div class='board'>\n        <table>\n          <caption>Game Board</caption>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import { h, Component } from 'preact'\nimport { route } from 'preact-router'\nimport Board from '../components/board'\nimport ttt from '../lib/game'\n\nimport { modeMap, playerMap } from '../store'\n\nexport default class LocalGame extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { thinking: false }\n    this.player = playerMap[props.player.toLowerCase()]\n    this.mode = modeMap[props.mode.toLowerCase()]\n    this.gameKey = `local-${this.player}-${this.mode}`\n    this.redirectIfInvalidSettings()\n  }\n\n  redirectIfInvalidSettings () {\n    if (typeof this.player === 'undefined' || typeof this.mode === 'undefined') route('/')\n  }\n\n  componentDidUpdate () {\n    if (!this.finished && this.game.finished) {\n      this.onfinish()\n    }\n  }\n\n  onfinish () {\n    this.props.localSaveStats(this.gameKey)\n  }\n\n  componentDidMount () {\n    if (!this.game) {\n      this.restart()\n    } else {\n      this.finished = this.game.finished\n      this.checkAndTakeComputersTurn()\n    }\n  }\n\n  checkAndTakeComputersTurn () {\n    if (!this.game || this.game.finished) return\n    if (this.game.nextPlayer === this.player) return\n    this.setState({ thinking: true })\n    window.requestAnimationFrame(() => {\n      this.props.moveForComputer(this.gameKey, this.mode)\n      this.setState({ thinking: false })\n    })\n  }\n\n  restart = (event) => {\n    this.finished = false\n    this.props.newGame(this.gameKey, this.player)\n  }\n\n  newgame = (event) => {\n    this.props.clearGameState(this.gameKey)\n    route('/')\n  }\n\n  boardClick = (event) => {\n    if (this.game.finished) return\n    if (this.game.nextPlayer !== this.player) return\n    if (!event.isEmpty) alert('This space is already taken')\n    this.props.moveForPlayer(this.gameKey, event.boardIndex)\n    window.requestAnimationFrame(() => {\n      this.checkAndTakeComputersTurn()\n    })\n  }\n\n  status () {\n    if (this.game && this.game.finished) {\n      if (this.game.draw) return 'Tie'\n      if ((this.player === ttt.X && this.game.xWin) || (this.player === ttt.O && this.game.oWin)) return 'You won'\n      return 'You lost'\n    } else {\n      return this.state.thinking ? 'Thinking...' : 'Your turn...'\n    }\n  }\n\n  render ({ player, mode }) {\n    const board = this.game ? (<Board win={this.game.winIndexes} board={this.game.board} click={this.boardClick} />) : <div />\n    return (\n      <main>\n        <p>You are playing as <strong>{player.toUpperCase()}</strong> against the computer on <strong>{mode.toLowerCase()}</strong> mode.</p>\n        <div class='board-wrapper'>\n          {board}\n          <span aria-live='polite' aria-atomic='true' class='status'>{this.status()}</span>\n        </div>\n        <p>\n          <button onclick={this.restart}>Restart</button>\n          <button onclick={this.newgame}>New Game</button>\n        </p>\n      </main>\n    )\n  }\n\n  get game () {\n    return this.props.games[this.gameKey]\n  }\n}\n"],"sourceRoot":""}
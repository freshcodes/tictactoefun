(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{ddgq:function(t,e,s){"use strict";s.d(e,"a",(function(){return n}));var i=s("hosL"),a=s("k8bO");class n extends i.Component{constructor(...t){super(...t),this.textMap={[a.a.E]:" ",[a.a.X]:"X",[a.a.O]:"O"},this.click=t=>{const e=t.target.closest("td"),s=parseInt(e.getAttribute("data-index"),10),i=parseInt(e.getAttribute("data-state"),10);this.props.click({td:e,boardIndex:s,isEmpty:0===i})}}renderCell(t,e){const s=e+3*t,a=this.props.board[s],n=`Cell ${e}, ${t}`,r=this.textMap[a],h=this.props.win.indexOf(s)>-1?"W":"";return Object(i.h)("td",{"data-index":s,"data-state":a,class:h},Object(i.h)("div",null,Object(i.h)("button",{type:"button",label:n,onClick:this.click},r)))}renderRow(t){const e=[0,1,2].map((e=>this.renderCell(t,e)));return Object(i.h)("tr",null,e)}render(){const t=[0,1,2].map((t=>this.renderRow(t)));return Object(i.h)("div",{class:"board"},Object(i.h)("table",null,Object(i.h)("caption",null,"Game Board"),Object(i.h)("tbody",null,t)))}}},"l/qf":function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return o}));var i=s("hosL"),a=s("Y3FI"),n=s("ddgq"),r=s("k8bO"),h=s("BXF7");class o extends i.Component{constructor(t){super(t),this.restart=()=>{this.finished=!1,this.props.newGame(this.gameKey,this.player)},this.newgame=()=>{this.props.clearGameState(this.gameKey),Object(a.b)("/")},this.boardClick=t=>{this.game.finished||this.game.nextPlayer===this.player&&(t.isEmpty||alert("This space is already taken"),this.props.moveForPlayer(this.gameKey,t.boardIndex),window.requestAnimationFrame((()=>{this.checkAndTakeComputersTurn()})))},this.state={thinking:!1},this.player=h.d[t.player.toLowerCase()],this.mode=h.b[t.mode.toLowerCase()],this.gameKey=`local-${this.player}-${this.mode}`,this.redirectIfInvalidSettings()}redirectIfInvalidSettings(){void 0!==this.player&&void 0!==this.mode||Object(a.b)("/")}componentDidUpdate(){!this.finished&&this.game.finished&&this.onfinish()}onfinish(){this.props.localSaveStats(this.gameKey)}componentDidMount(){this.game?(this.finished=this.game.finished,this.checkAndTakeComputersTurn()):this.restart()}checkAndTakeComputersTurn(){this.game&&!this.game.finished&&this.game.nextPlayer!==this.player&&(this.setState({thinking:!0}),window.requestAnimationFrame((()=>{this.props.moveForComputer(this.gameKey,this.mode),this.setState({thinking:!1})})))}status(){return this.game&&this.game.finished?this.game.draw?"Tie":this.player===r.a.X&&this.game.xWin||this.player===r.a.O&&this.game.oWin?"You won":"You lost":this.state.thinking?"Thinking...":"Your turn..."}render({player:t,mode:e}){const s=this.game?Object(i.h)(n.a,{win:this.game.winIndexes,board:this.game.board,click:this.boardClick}):Object(i.h)("div",null);return Object(i.h)("main",null,Object(i.h)("p",null,"You are playing as ",Object(i.h)("strong",null,t.toUpperCase())," against the computer on ",Object(i.h)("strong",null,e.toLowerCase())," mode."),Object(i.h)("div",{class:"board-wrapper"},s,Object(i.h)("span",{"aria-live":"polite","aria-atomic":"true",class:"status"},this.status())),Object(i.h)("p",null,Object(i.h)("button",{onclick:this.restart},"Restart"),Object(i.h)("button",{onclick:this.newgame},"New Game")))}get game(){return this.props.games[this.gameKey]}}}}]);
//# sourceMappingURL=route-local_game.chunk.2789c.esm.js.map
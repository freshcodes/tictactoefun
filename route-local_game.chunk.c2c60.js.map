{"version":3,"sources":["webpack:///./components/board.js","webpack:///./routes/local_game.js"],"names":["Board","Component","textMap","ttt","E","X","O","click","event","td","target","closest","boardIndex","parseInt","getAttribute","state","this","props","isEmpty","renderCell","rowIndex","cellIndex","cellState","board","label","text","cssClass","win","indexOf","data-index","data-state","class","type","onClick","renderRow","cells","map","render","rows","LocalGame","constructor","super","restart","finished","newGame","gameKey","player","newgame","clearGameState","route","boardClick","game","nextPlayer","alert","moveForPlayer","window","requestAnimationFrame","checkAndTakeComputersTurn","thinking","playerMap","toLowerCase","mode","modeMap","redirectIfInvalidSettings","componentDidUpdate","onfinish","localSaveStats","componentDidMount","setState","moveForComputer","status","draw","xWin","oWin","winIndexes","toUpperCase","aria-live","aria-atomic","onclick","games"],"mappings":"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","file":"route-local_game.chunk.c2c60.js","sourcesContent":["import { h, Component } from 'preact'\n\nimport ttt from '../lib/game'\n\nexport default class Board extends Component {\n  textMap = {\n    [ttt.E]: ' ',\n    [ttt.X]: 'X',\n    [ttt.O]: 'O'\n  }\n\n  click = (event) => {\n    const td = event.target.closest('td')\n    const boardIndex = parseInt(td.getAttribute('data-index'), 10)\n    const state = parseInt(td.getAttribute('data-state'), 10)\n    const isEmpty = state === 0\n    this.props.click({ td, boardIndex, isEmpty })\n  }\n\n  renderCell (rowIndex, cellIndex) {\n    const boardIndex = cellIndex + (rowIndex * 3)\n    const cellState = this.props.board[boardIndex]\n    const label = `Cell ${cellIndex}, ${rowIndex}`\n    const text = this.textMap[cellState]\n    const cssClass = this.props.win.indexOf(boardIndex) > -1 ? 'W' : ''\n\n    return (\n      <td data-index={boardIndex} data-state={cellState} class={cssClass}>\n        <div>\n          <button type='button' label={label} onClick={this.click}>{text}</button>\n        </div>\n      </td>\n    )\n  }\n\n  renderRow (rowIndex) {\n    const cells = [0, 1, 2].map(cellIndex => this.renderCell(rowIndex, cellIndex))\n\n    return (\n      <tr>\n        {cells}\n      </tr>\n    )\n  }\n\n  render () {\n    const rows = [0, 1, 2].map(rowIndex => this.renderRow(rowIndex))\n\n    return (\n      <div class='board'>\n        <table>\n          <caption>Game Board</caption>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import { h, Component } from 'preact'\nimport { route } from 'preact-router'\nimport Board from '../components/board'\nimport ttt from '../lib/game'\n\nimport { modeMap, playerMap } from '../store'\n\nexport default class LocalGame extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { thinking: false }\n    this.player = playerMap[props.player.toLowerCase()]\n    this.mode = modeMap[props.mode.toLowerCase()]\n    this.gameKey = `local-${this.player}-${this.mode}`\n    this.redirectIfInvalidSettings()\n  }\n\n  redirectIfInvalidSettings () {\n    if (typeof this.player === 'undefined' || typeof this.mode === 'undefined') route('/')\n  }\n\n  componentDidUpdate () {\n    if (!this.finished && this.game.finished) {\n      this.onfinish()\n    }\n  }\n\n  onfinish () {\n    this.props.localSaveStats(this.gameKey)\n  }\n\n  componentDidMount () {\n    if (!this.game) {\n      this.restart()\n    } else {\n      this.finished = this.game.finished\n      this.checkAndTakeComputersTurn()\n    }\n  }\n\n  checkAndTakeComputersTurn () {\n    if (!this.game || this.game.finished) return\n    if (this.game.nextPlayer === this.player) return\n    this.setState({ thinking: true })\n    window.requestAnimationFrame(() => {\n      this.props.moveForComputer(this.gameKey, this.mode)\n      this.setState({ thinking: false })\n    })\n  }\n\n  restart = (event) => {\n    this.finished = false\n    this.props.newGame(this.gameKey, this.player)\n  }\n\n  newgame = (event) => {\n    this.props.clearGameState(this.gameKey)\n    route('/')\n  }\n\n  boardClick = (event) => {\n    if (this.game.finished) return\n    if (this.game.nextPlayer !== this.player) return\n    if (!event.isEmpty) alert('This space is already taken')\n    this.props.moveForPlayer(this.gameKey, event.boardIndex)\n    window.requestAnimationFrame(() => {\n      this.checkAndTakeComputersTurn()\n    })\n  }\n\n  status () {\n    if (this.game && this.game.finished) {\n      if (this.game.draw) return 'Tie'\n      if ((this.player === ttt.X && this.game.xWin) || (this.player === ttt.O && this.game.oWin)) return 'You won'\n      return 'You lost'\n    } else {\n      return this.state.thinking ? 'Thinking...' : 'Your turn...'\n    }\n  }\n\n  render ({ player, mode }) {\n    const board = this.game ? (<Board win={this.game.winIndexes} board={this.game.board} click={this.boardClick} />) : <div />\n    return (\n      <main>\n        <p>You are playing as <strong>{player.toUpperCase()}</strong> against the computer on <strong>{mode.toLowerCase()}</strong> mode.</p>\n        <div class='board-wrapper'>\n          {board}\n          <span aria-live='polite' aria-atomic='true' class='status'>{this.status()}</span>\n        </div>\n        <p>\n          <button onclick={this.restart}>Restart</button>\n          <button onclick={this.newgame}>New Game</button>\n        </p>\n      </main>\n    )\n  }\n\n  get game () {\n    return this.props.games[this.gameKey]\n  }\n}\n"],"sourceRoot":""}